#+BEGIN_EXAMPLE
                          ▁▁▁▁▁▁▁▁   ▁▁▁  ▁▁▁▁▁      ▁▁
                         ┃ '▁ ` ▁ \ / ▁ \/ ▁ \ \ /\ / /
                         ┃ ┃ ┃ ┃ ┃ ┃  ▁▁/ (▁) \ V  V /
                         ┃▁┃ ┃▁┃ ┃▁┃\▁▁▁┃\▁▁▁/ \▁/\▁/
                         Modal Editing Of Wonder
#+END_EXAMPLE

** INTRODUCTION
ฅ^•ﻌ•^ฅ ---------------------------------------------------------------- ฅ^•ﻌ•^ฅ

Welcome to Meow! Meow is a modal-editing package for Emacs, inspired by Kakoune.
This is a hands-on tutorial. It aims to help both new and experienced Emacs
users get started with or migrate to Meow as easily as possible.

In the first section, you will learn about the basics of movement and editing.
This will give you a feel for Meow.

In the second section, you will learn more advanced functionalities such as
'expand' and 'inner-of', which will enable you to move further and faster. The
selection of text will also become more accurate and flexible.

#+BEGIN_QUOTE
If the cat comes up and it sits in my lap, I want to hear the sound of the cat
purring, not the fans of the computer.

    -- Linus Torvalds
#+END_QUOTE

** BASICS
ฅ^•ﻌ•^ฅ --------------------------- SECTION 1 --------------------------- ฅ^•ﻌ•^ฅ

                    🐾 MODES

                    In "modal editing", users interact with the text through
       .---,        modes. There are *five* modes in Meow and the most used two
       │ i │        are *NORMAL* and *INSERT*. If you set up Meow properly, at
       `---'        the bottom left you should see NORMAL, indicating you are
                    now in normal mode. Make sure Caps Lock is OFF and press
                    ~i~. The indicator turns to INSERT and you are able to type
       .---,        in characters as usual. This is insert mode. Press ~ESC~ or
       │ESC│        ~C-[~ to leave it and return to normal mode. The other
       `---'        three modes are *MOTION*, *KEYPAD*, and *BEACON*. These
                    modes will be explained in the third part.


                    🐾 MOVEMENT

                    The movement in a buffer (representations of the content
       .---,        of a file opened in Emacs) can be done using the arrow keys.
       │ ↑ │        When pressed, the cursor will move one column/row in the
   .---'---'---,    the corresponding direction. Hold any of ~←~, ~↑~, ~→~, ~↓~
   │ ← │ ↓ │ → │    to continue the movement until the place where you want
   `---'---'---`    to stop.

                    However, furthering the tradition of mode-based editors,
 .---,---,---,---,  the ~h~, ~j~, ~k~, ~l~ keys are often used for the same
 │ h │ j │ k │ l │  purpose, and will respectively move the cursor to the
 `---'---'---'---`  left, down, up, right by one, when hit. Using those keys
   ↕   ↕   ↕   ↕    is the recommended way of moving around in a buffer.
 .---,---,---,---,  If you're not familiar with this concept, the proximity
 │ ← │ ↓ │ ↑ │ → │  of those four keys with the rest of the lettered keys
 `---'---'---'---`  on a ~qwerty~ layout allows faster interaction with the
                    cursor position than if the user had to move their hand to
                    reach the arrow keys.

                    🐾 SELECTION -- SINGLE WORD

                    But this is still tedious. Meow offers more when it comes to
 ▒▒▒word▋▒▒▒        moving the cursor. Press ~e~, you will see a /word/ has been
    ⇡               selected and the cursor moves to its end. Press ~e~ again to
 at word start      move further and select more[*]. ~b~ key does the same, but
                    in the opposite direction.

 ▒▒▒␣word▋▒▒▒       One or more extra blank spaces might be included in the
    ⇡               selection if the cursor is before/after the word start/end.
 before the word    In the left illustrations, symbol ▒ denotes the text around
 after the word     the target /word/. ⇡ and ⇣ indicate where the cursor was
         ⇣          before the movement, while ▋shows the cursor position (and
 ▒▒▒▋word␣▒▒▒       shape) after the movement.

                    It's therefore important to know this key idea behind Meow:
 ▒▒▒word▋▒▒▒        *Movement means selection*. One advantage of this behavior
    ↣↣↣↣            is that users immediately get two useful positions each time
 move forward       they move (and select): the start and end of a selection.
                    When moving forwards word-wise, the cursor will stop right
 ▒▒▒▋word▒▒▒        after the word's last character. On the contrary, moving
     ↢↢↢↢           backwards one word will place the cursor right before the
 move backward      first letter.


#+BEGIN_QUOTE
A cat takes more interest in your code than your spouse or your boss.

    --Michael DiSibio
#+END_QUOTE

** SELECTIONS
ฅ^•ﻌ•^ฅ --------------------------- SECTION 2 --------------------------- ฅ^•ﻌ•^ฅ

                    🐾 SELECTION -- WORD CLUSTER

Suppose you want to select a chunk of words instead of a single one, you can
extend the word-level selection with ~meow-expand~. You may have already noticed
in the previous section that when hitting ~e~ or ~b~ to move and select, there
are digits (0-9) blinking at the end of some words ahead of or behind the
current selection. Take the following sentence as an example.
#+BEGIN_EXAMPLE

▒▒▒▒With Meow comes the power of modal editing.▒▒▒▒
                    └─────── to select ──────┘

#+END_EXAMPLE
To select the last five words, first move the cursor to "t" of "the". Then type
~e~, and you will see some digits showing up quickly and then disappearing:
#+BEGIN_EXAMPLE

▒▒▒▒With Meow comes the powe1 o2 moda3 editin4.▒▒▒▒
                   ↱└─┘     ⇡  ⇡     ⇡       ⇡
               selected
                        ↣↣↣ select forward ↣↣↣

#+END_EXAMPLE
Note except for the selected "the", all the words that follow have their last
letter replaced with a digit. If you feel the digit's showing-up time is too
short, you may want to add ~(setq meow-expand-hint-remove-delay 1.5)~ to your
init.el. For now, just redo the selection and type any of 1, 2, 3, 4. Now you
have acquired the power of ~meow-expand-x~, where x is a digit in the range of
[0-9].

                    🐾 SELECTION -- LINE

Wanna select more? Great! Let's select lines this time. In normal mode, type ~x~
and a line will be selected. Press ~x~ again, you will select yet another line!
You can keep doing this until all the lines you want are included.

Now, cancel the selection with ~g~. It's worth knowing that ~meow-expand-x~ will
automatically extend to line-level when you select lines. Suppose you have the
first line selected.
#+BEGIN_EXAMPLE

┌────────────────────── selected ──────────────────────┐
First of all, there’s the name that the family use daily,
1     Such as Peter, Augustus, Alonzo, or James,
2uch as Victor or Jonathan, George or Bill Bailey—
3     All of them sensible everyday names.
4     -- T.S. Eliot

#+END_EXAMPLE

Hit 3 and the selection will expand to the beginning of the 3rd line, *without*
selecting it. What's more, Meow is flexible enough to do this in a reversed
manner. Type ~;~ (~meow-reverse~) to try it out yourself.

#+BEGIN_QUOTE
Managing senior programmers is like herding cats.

    -- Dave Platt
#+END_QUOTE

** EDITING
ฅ^•ﻌ•^ฅ --------------------------- SECTION 3 --------------------------- ฅ^•ﻌ•^ฅ

                    🐾 MAKING CHANGES

                    Now that you can move around and select stuff, it's time to
                    make changes to buffer content. There are five frequently
                    used keys for changing text in normal mode: ~c, d, p, s, u~.

    .---,           To change a word, select the word first (~e~) and then press\\
    │ c │           the key ~c~. You will find you are in insert mode. Of course,\\ `---'           you can expand the selection and then change all of them.\\
 ~meow-change~      Similarly, to change a whole line, select it with ~x~ and\\
                    then change (~c~) it. Again, you can expand the selection\\
                    to include multiple lines and replace them with new text.

    .---,           To delete a single character, press the key ~d~. Note this
    │ d │           command by default deletes forward, meaning it will delete
    `---'           the white space right ahead of a selection. If there is no
 ~meow-delete~      selection, it removes the character under the current cursor.
                    The key ~D~, when pressed, will delete backward (~meow-backward-delete~).

    .---,           If you want to delete the selected object (word, phrase or
    │ s │           line), press ~s~. Note, if there is no selection at all,
    `---'           pressing the key ~s~ will act as if you pressed ~C-k~ (kill
 ~meow-kill~        rest of current line or one or more lines).

    .---,           In Emacs, to kill means to cut, meaning you can yank (or
    │ p │           paste) the killed text. To do so, press the key ~p~. If you
    `---'           killed an entire line, then ~p~ will yank it right above the
 ~meow-yank~        current line.

    .---,           If you later changed your mind and would like to undo the
    │ u │           changes, press ~u~ a few times. *TODO*: explain ~U~?
    `---'           next: open-above and open-below
 ~meow-undo~
